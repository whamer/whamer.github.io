###################################################################################
## ----------------------------------------------------------------------------- ##
## Terrain Analysis for Regionalisation ----
## ----------------------------------------------------------------------------- ##
###################################################################################
# We created different topographic and hydrologic grids from a 1x1 m DEM from LvermGEO
# The grids help as correlation base for the later geostatictsical interpolation of Variables.
# For the data analysis we used the package RSAGA
## ----------------------------------------------------------------------------- ##
## Pakete ----
## ----------------------------------------------------------------------------- ##
if(!("raster" %in% rownames(installed.packages()))){install.packages("raster")}
if(!("RSAGA" %in% rownames(installed.packages()))){install.packages("RSAGA")}
if(!("sp" %in% rownames(installed.packages()))){install.packages("sp")}
if(!("sf" %in% rownames(installed.packages()))){install.packages("sf")}
if(!("fasterize" %in% rownames(installed.packages()))){install.packages("fasterize")}
if(!("corrplot" %in% rownames(installed.packages()))){install.packages("corrplot")}
library(raster)
library(sp)
library(RSAGA)
library(sf)
library(fasterize)
library(corrplot)
#Setting Working Directory
if(rev(strsplit(getwd(), "/")[[1]])[1]!= "e3d_tramlines_paper"){
setwd("../")
if(rev(strsplit(getwd(), "/")[[1]])[1]!= "e3d_tramlines_paper"){
alldir <- list.dirs()
setwd(alldir[which(unlist(Map(function(i){rev(strsplit(alldir[i], "/")[[1]])[1]}, i = 1:length(alldir))) %in% "e3d_tramlines_paper")])
}
}
## ----------------------------------------------------------------------------- ##
## Creating Hydrologic and Topographic Grids from DEM for Data Analysis
## ----------------------------------------------------------------------------- ##
# Loading Standard DEM with Catchment Extent for Analysis
DEM <- raster("./analysis/data/raw_data/RAW_GEODat/DGM1_LvermGEO.tif")
NAvalue(DEM) <- -9999
names(DEM) <- "DEM"
writeRaster(DEM, "./analysis/data/derived_data/derived_geodat/Topo_DEM/DEM.sgrd", overwrite = TRUE)
# Defineing SAGA Environment and processing of terrain data for regionalisation
if(dir.exists("C:/OSGeo4W64/apps/saga")){
rsaga.env("C:/OSGeo4W64/apps/saga")
}else if(dir.exists("C:/OSGeo4W64/apps/saga-ltr")){
rsaga.env("C:/OSGeo4W64/apps/saga-ltr")
}else{
warning("Define SAGA environment!")
}
# Basic topographic Analysis with SAGA
current_path <- getwd()
params = list(ELEVATION = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/DEM.sgrd", sep = ""),
SHADE = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/SHADE.sgrd", sep = ""),
SLOPE = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/SLOPE.sgrd", sep = ""),
ASPECT = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/ASPECT.sgrd", sep = ""),
HCURV = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/HCURV.sgrd", sep = ""),
VCURV = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/VCURV.sgrd", sep = ""),
CONVERGENCE = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/CONVE.sgrd", sep = ""),
SINKS = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/SINKS.sgrd", sep = ""),
WETNESS = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/WETNESS.sgrd", sep = ""),
LSFACTOR = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/LSFACTOR.sgrd", sep = ""),
CHNL_BASE = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/CHNL_BASE.sgrd", sep = ""),
CHNL_DIST = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/CHNL_DIST.sgrd", sep = ""),
VALL_DEPTH = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/VALL_DEPTH.sgrd", sep = ""),
RSP = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/RSP.sgrd", sep = ""))
rsaga.geoprocessor("ta_compound ", 0, param = params)
# Creating dditional Grids like TRI, TPI and SAGA Wentness Index with SAGA
params = list(DEM = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/DEM.sgrd", sep = ""),
TRI = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/TRI.sgrd", sep = ""))
rsaga.geoprocessor("ta_morphometry ", 16, param = params)
params = list(DEM = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/DEM.sgrd", sep = ""),
TPI = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/TPI.sgrd", sep = ""))
rsaga.geoprocessor("ta_morphometry ", 18, param = params)
rsaga.wetness.index(in.dem = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/DEM.sgrd", sep = ""),
out.wetness.index = paste(current_path,"./analysis/data/derived_data/derived_geodat/Topo_DEM/STWI.sgrd", sep = ""),
area.type = 2)
## ----------------------------------------------------------------------------- ##
## Creating Table for Measured Points with Covariables ----
## ----------------------------------------------------------------------------- ##
# Loading all Grids which should be analyzed for covariables. NAs in Rasters Aspect and RSP were exchanged with 0
# to avoid NA-Pixels in Modelling
STWI <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/STWI.sdat")
proj4string(STWI) <- crs("+init=epsg:25832")
TWI <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/WETNESS.sdat")
proj4string(TWI) <- crs("+init=epsg:25832")
ASPECT <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/ASPECT.sdat")
proj4string(ASPECT) <- crs("+init=epsg:25832")
ASPECT[is.na(ASPECT[])] <- 0
writeRaster(ASPECT, filename = "./analysis/data/derived_data/derived_geodat/Topo_DEM/ASPECT.sdat",
format = "SAGA",
overwrite = TRUE)
SLOPE <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/SLOPE.sdat")
proj4string(SLOPE) <- crs("+init=epsg:25832")
CHNL_BASE <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/CHNL_BASE.sdat")
proj4string(CHNL_BASE) <- crs("+init=epsg:25832")
CHNL_DIST <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/CHNL_DIST.sdat")
proj4string(CHNL_DIST) <- crs("+init=epsg:25832")
CONVE <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/CONVE.sdat")
proj4string(CONVE) <- crs("+init=epsg:25832")
LSFACTOR <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/LSFACTOR.sdat")
proj4string(LSFACTOR) <- crs("+init=epsg:25832")
HCURV <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/HCURV.sdat")
proj4string(HCURV) <- crs("+init=epsg:25832")
RSP <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/RSP.sdat")
proj4string(RSP) <- crs("+init=epsg:25832")
RSP[is.na(RSP[])] <- 0
writeRaster(RSP, filename = "./analysis/data/derived_data/derived_geodat/Topo_DEM/RSP",
format = "SAGA",
overwrite = TRUE)
SHADE <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/SHADE.sdat")
proj4string(SHADE) <- crs("+init=epsg:25832")
SINKS <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/SINKS.sdat")
proj4string(SINKS) <- crs("+init=epsg:25832")
TPI <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/TPI.sdat")
proj4string(TPI) <- crs("+init=epsg:25832")
TRI <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/TRI.sdat")
proj4string(TRI) <- crs("+init=epsg:25832")
VALL_DEPTH <- raster("./nalysis/data/derived_data/derived_geodat/Topo_DEM/VALL_DEPTH.sdat")
proj4string(VALL_DEPTH) <- crs("+init=epsg:25832")
VCURV <- raster("./nalysis/data/derived_data/derived_geodat/Topo_DEM/VCURV.sdat")
proj4string(VCURV) <- crs("+init=epsg:25832")
# Loading and TRanforming Landuse vector data set
LANDUSE <- st_read("./analysis/data/raw_data/RAW_GEODat/LU_FIELDS_2017/LU_FIELDS_2017.shp") %>%
st_set_crs(4647) %>%
st_transform(25832)
# Rasterizing, reclassifying and exporting Lanuse raster
LUSE <- fasterize(LANDUSE, DEM, field = "LU_ID")
NAvalue(LUSE) <- -9999
names(LUSE) <- "LUSE"
# The matrix differentiates arable land (1), grass land (2) and not sampled land (3) from all provided
# land use types
m <- c(0.5, 1.5, 1,  1.5, 2.5, 2,  2.5, 3.5, 3,
3.5, 5.5, 3, 5.5, 6.5, 2, 6.5, 7.5, 3,
7.5 ,8.5 ,3 ,8.5 ,9.5, 3, 9.5, 10.5, 2)
rclmat <- matrix(m, ncol = 3, byrow = TRUE)
LUSE <- reclassify(LUSE, rclmat)
Topo_Stack <- stack(DEM, STWI, TWI, ASPECT, SLOPE, CHNL_BASE, CHNL_DIST, CONVE,
LSFACTOR,HCURV, RSP, SHADE, TPI, TRI, VALL_DEPTH, VCURV, LUSE)
# Transformin Table of Sampling Points to SpatialPointsDataFrame and Extracting Values From Topo_Stack to Table
# of Sampling Points and Export. The Table contains all possible covariables and is used for non-linear Models
MB_Pts <- read.csv("./analysis/data/derived_data/MB_PTS.csv")
coordinates(MB_Pts) <- ~X + Y
proj4string(MB_Pts) <- crs("+init = epsg:25832")
MB_Pts_CoVar_All <- extract(Topo_Stack, MB_Pts,sp = TRUE)
MB_CoVar_All  = as.data.frame(MB_Pts_CoVar_All)
MB_CoVar_All[2:3] <- NULL
write.csv(MB_CoVar_All, "./analysis/data/derived_data/MB_COVAR_NL.csv", row.names = FALSE)
###################################################################################
## ----------------------------------------------------------------------------- ##
## Analysis of main covariables for creating linear models ----
## ----------------------------------------------------------------------------- ##
###################################################################################
# Creating Correlation Matrix
CoVar_Cor = layerStats(Topo_Stack, 'pearson', na.rm = T)
Cor_Mat = as.matrix(CoVar_Cor$'pearson correlation coefficient')
corrplot.mixed(Cor_Mat, number.cex = 0.8, tl.cex = 0.9, tl.col = "black",
outline = FALSE, mar = c(0,0,2,2), upper = "square", bg = NA, is.corr = FALSE)
# The Corplot shows strong multkolinearity for DGM SLOPE RSP and TPI which is why they are excluded from
# linear model analysis. SINKS and LUSE are excluded because they are based on categorial values
# The Corplot shows a moderate multkolinearity for TRI with LS and STWI which does not exceed r² of 0.62
VALL_DEPTH <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/VALL_DEPTH.sdat")
proj4string(VALL_DEPTH) <- crs("+init=epsg:25832")
VCURV <- raster("./analysis/data/derived_data/derived_geodat/Topo_DEM/VCURV.sdat")
proj4string(VCURV) <- crs("+init=epsg:25832")
# Loading and TRanforming Landuse vector data set
LANDUSE <- st_read("./analysis/data/raw_data/RAW_GEODat/LU_FIELDS_2017/LU_FIELDS_2017.shp") %>%
st_set_crs(4647) %>%
st_transform(25832)
# Rasterizing, reclassifying and exporting Lanuse raster
LUSE <- fasterize(LANDUSE, DEM, field = "LU_ID")
NAvalue(LUSE) <- -9999
names(LUSE) <- "LUSE"
# The matrix differentiates arable land (1), grass land (2) and not sampled land (3) from all provided
# land use types
m <- c(0.5, 1.5, 1,  1.5, 2.5, 2,  2.5, 3.5, 3,
3.5, 5.5, 3, 5.5, 6.5, 2, 6.5, 7.5, 3,
7.5 ,8.5 ,3 ,8.5 ,9.5, 3, 9.5, 10.5, 2)
rclmat <- matrix(m, ncol = 3, byrow = TRUE)
LUSE <- reclassify(LUSE, rclmat)
Topo_Stack <- stack(DEM, STWI, TWI, ASPECT, SLOPE, CHNL_BASE, CHNL_DIST, CONVE,
LSFACTOR,HCURV, RSP, SHADE, TPI, TRI, VALL_DEPTH, VCURV, LUSE)
# Transformin Table of Sampling Points to SpatialPointsDataFrame and Extracting Values From Topo_Stack to Table
# of Sampling Points and Export. The Table contains all possible covariables and is used for non-linear Models
MB_Pts <- read.csv("./analysis/data/derived_data/MB_PTS.csv")
coordinates(MB_Pts) <- ~X + Y
proj4string(MB_Pts) <- crs("+init=epsg:25832")
MB_Pts_CoVar_All <- extract(Topo_Stack, MB_Pts,sp = TRUE)
MB_CoVar_All  = as.data.frame(MB_Pts_CoVar_All)
MB_CoVar_All[2:3] <- NULL
write.csv(MB_CoVar_All, "./analysis/data/derived_data/MB_COVAR_NL.csv", row.names = FALSE)
###################################################################################
## ----------------------------------------------------------------------------- ##
## Analysis of main covariables for creating linear models ----
## ----------------------------------------------------------------------------- ##
###################################################################################
# Creating Correlation Matrix
CoVar_Cor = layerStats(Topo_Stack, 'pearson', na.rm = T)
Cor_Mat = as.matrix(CoVar_Cor$'pearson correlation coefficient')
corrplot.mixed(Cor_Mat, number.cex = 0.8, tl.cex = 0.9, tl.col = "black",
outline = FALSE, mar = c(0,0,2,2), upper = "square", bg = NA, is.corr = FALSE)
# The Corplot shows strong multkolinearity for DGM SLOPE RSP and TPI which is why they are excluded from
# linear model analysis. SINKS and LUSE are excluded because they are based on categorial values
# The Corplot shows a moderate multkolinearity for TRI with LS and STWI which does not exceed r² of 0.62
setwd("E:\\Doktorarbeit\\Website_Mehltau\\create_pred\\whamer.github.io")
library(sf)
locations <- read_sf("../Dont_Upload_Data/raw_data/spatial/standorte.gpkg")
locations
locations <- read_sf("../Dont_Upload_Data/raw_data/spatial/standorte.gpkg") %>%
dplyr::select(Standort)
locations
